{
  "version": 3,
  "file": "ngu-utility.umd.min.js",
  "sources": [
    "ng://ngu-utility/out/letter-avatar/lameta.ts",
    "ng://ngu-utility/out/letter-avatar/ngu-letter-avatar.component.ts",
    "ng://ngu-utility/out/ngu-utility.module.ts"
  ],
  "sourcesContent": [
    "export class LAmeta {\r\n    defaultColors: string[] = [\"#5A8770\", \"#B2B7BB\", \"#6FA9AB\", \"#F5AF29\", \"#0088B9\", \"#F18636\", \"#D93A37\", \"#A6B12E\", \"#5C9BBC\", \"#F5888D\", \"#9A89B5\", \"#407887\", \"#9A89B5\", \"#5A8770\", \"#D33F33\", \"#A2B01F\", \"#F0B126\", \"#0087BF\", \"#F18636\", \"#0087BF\", \"#B2B7BB\", \"#72ACAE\", \"#9C8AB4\", \"#5A8770\", \"#EEB424\", \"#407887\"];\r\n    defaultTextColor: string = '#ffffff';\r\n    defaultBorder: string = 'border:5px solid white';\r\n    defaultTriangleup: string = 'width: 0;height: 0;border-left: 50px solid transparent;border-right: 50px solid transparent;border-bottom: 100px solid;';\r\n    deafultFontsize: string = '30';\r\n    defaultHeight: string = '50';\r\n    deafultWidth: string = '50';\r\n    defaultRadius: string = 'border-radius:50%;';\r\n    deafultDynamic: string = 'false';\r\n    defaultRotatedeg: string = '0';\r\n    defaultAvatarborder:string = 'false';\r\n    defaultFontWeight: string = '400';\r\n    defaultFontFamily: string = 'HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica, Arial,Lucida Grande, sans-serif';\r\n}\r\n\r\nexport class Attributes {\r\n    alphabetcolors: string = 'avatar-alphabet-colors';\r\n    textColor: string = 'avatar-text-color';\r\n    defaultBorder: string = 'avatar-default-border';\r\n    triangleup: string = 'avatar-triangle-up';\r\n    fontsize: string = 'avatar-font-size';\r\n    height: string = 'avatar-height';\r\n    width: string = 'avatar-width';\r\n    radius: string = 'avatar-radius';\r\n    avatarcustombgcolor: string = 'avatar-custom-bg-color';\r\n    dynamic: string = 'avatar-dynamic';\r\n    fontWeight: string = 'avatar-font-weight';\r\n    fontFamily: string = 'avatar-font-family';\r\n    shape: string = 'avatar-shape';\r\n    data: string = 'avatar-data';\r\n    rotatedeg: string = 'avatar-rotate-degree';\r\n    avatarborder:string = 'avatar-border';\r\n\r\n}\r\n\r\n",
    "import { Component, ElementRef, AfterViewInit, Input } from \"@angular/core\";\r\n\r\nimport { Attributes, LAmeta } from \"./lameta\";\r\n\r\ndeclare function unescape(x: string): string;\r\n\r\n@Component({\r\n    selector: \"ngu-letter-avatar\",\r\n    template: \"<ng-content></ng-content>\"\r\n})\r\nexport class NguLetterAvatarComponent  {\r\n    private letteravatar: any;\r\n    private imageTag: HTMLElement;\r\n    private _meta: LAmeta = new LAmeta();\r\n    private attribute: Attributes = new Attributes();\r\n\r\n    @Input(\"avatar-alphabet-colors\") alphabetcolors: string[];\r\n    @Input(\"avatar-text-color\") textColor: string;\r\n    @Input(\"avatar-default-border\") defaultBorder: string;\r\n    @Input(\"avatar-triangle-up\") triangleup: string;\r\n    @Input(\"avatar-font-size\") fontsize: string;\r\n    @Input(\"avatar-height\") height: string;\r\n    @Input(\"avatar-width\") width: string;\r\n    @Input(\"avatar-font-weight\") fontWeight: string;\r\n    @Input(\"avatar-font-family\") fontFamily: string;\r\n    base: string = \"data:image/svg+xml;base64,\";\r\n    @Input(\"avatar-radius\") radius: string;\r\n    @Input(\"avatar-dynamic\") dynamic: string;\r\n    @Input(\"avatar-rotate-degree\") rotatedeg: string;\r\n    @Input(\"avatar-char-count\") charCount: string = \"1\";\r\n    @Input(\"avatar-data\") data: string;\r\n    @Input(\"avatar-border-style\") avatarBorderStyle: string;\r\n    @Input(\"avatar-border\") avatarborder: string;\r\n    @Input(\"avatar-custom-border\") avatarcustomborder: string;\r\n    @Input(\"avatar-shape\") shape: string;\r\n    @Input(\"avatar-custom-bg-color\") avatarcustombgcolor: string;\r\n\r\n    constructor(el: ElementRef) {\r\n        this.letteravatar = el.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (!this.alphabetcolors) {\r\n            this.alphabetcolors = this.getPropertyValue(this.attribute.alphabetcolors) ?\r\n                this.getPropertyValue(this.attribute.alphabetcolors) : this._meta.defaultColors;\r\n        }\r\n        if (!this.textColor) {\r\n            this.textColor = this.getPropertyValue(this.attribute.textColor) ?\r\n                this.getPropertyValue(this.attribute.textColor) : this._meta.defaultTextColor;\r\n        }\r\n        if(!this.avatarcustombgcolor) {\r\n            this.avatarcustombgcolor = this.getPropertyValue(this.attribute.avatarcustombgcolor);\r\n        }\r\n\r\n        if (!this.avatarborder) {\r\n            this.avatarborder = this.getPropertyValue(this.attribute.avatarborder) ?\r\n                this.getPropertyValue(this.attribute.avatarborder) : this._meta.defaultAvatarborder;\r\n        }\r\n\r\n        if (!this.defaultBorder) {\r\n            this.defaultBorder = this.getPropertyValue(this.attribute.defaultBorder) ?\r\n                this.getPropertyValue(this.attribute.defaultBorder) : this._meta.defaultBorder;\r\n        }\r\n        if (!this.triangleup) {\r\n            this.triangleup = this.getPropertyValue(this.attribute.triangleup) ?\r\n                this.getPropertyValue(this.attribute.triangleup) : this._meta.defaultTriangleup;\r\n        }\r\n        if (!this.fontsize) {\r\n            this.fontsize = this.getPropertyValue(this.attribute.fontsize) ?\r\n                this.getPropertyValue(this.attribute.fontsize) : this._meta.deafultFontsize;\r\n        }\r\n        if (!this.height) {\r\n            this.height = this.getPropertyValue(this.attribute.height) ?\r\n                this.getPropertyValue(this.attribute.height) : this._meta.defaultHeight;\r\n        }\r\n        if (!this.width) {\r\n            this.width = this.getPropertyValue(this.attribute.width) ?\r\n                this.getPropertyValue(this.attribute.width) : this._meta.deafultWidth;\r\n        }\r\n        if (!this.radius) {\r\n            this.radius = this.getPropertyValue(this.attribute.radius) ?\r\n                this.getPropertyValue(this.attribute.radius) : this._meta.defaultRadius;\r\n        }\r\n        if (!this.dynamic) {\r\n            this.dynamic = this.getPropertyValue(this.attribute.dynamic) ?\r\n                this.getPropertyValue(this.attribute.dynamic) : false;\r\n        }\r\n        if (!this.rotatedeg) {\r\n            this.rotatedeg = this.getPropertyValue(this.attribute.rotatedeg) ?\r\n                this.getPropertyValue(this.attribute.rotatedeg) : this._meta.defaultRotatedeg;\r\n        }\r\n        if (!this.fontWeight) {\r\n            this.fontWeight = this.getPropertyValue(this.attribute.fontWeight) ?\r\n                this.getPropertyValue(this.attribute.fontWeight) : this._meta.defaultFontWeight;\r\n        }\r\n        if (!this.fontFamily) {\r\n            this.fontFamily = this.getPropertyValue(this.attribute.fontFamily) ?\r\n                this.getPropertyValue(this.attribute.fontFamily) : this._meta.defaultFontFamily;\r\n        }\r\n        if (!this.shape) {\r\n            this.shape = this.getPropertyValue(this.attribute.shape);\r\n        }\r\n        if (!this.data) {\r\n            this.data = this.getPropertyValue(this.attribute.data);\r\n        }\r\n        this.createAvatar();\r\n    }\r\n    private getPropertyValue(property: string): any {\r\n        let result: any = \"\";\r\n        result = this.letteravatar.getAttribute(property);\r\n        return result;\r\n    }\r\n\r\n    private createAvatar(): void {\r\n        let c: string = \"\";\r\n        if (this.charCount === \"2\") {\r\n            let _data: string = this.getFirstAndLastName(this.data.toUpperCase());\r\n            if (_data) {\r\n                c = _data;\r\n            } else {\r\n                c = this.data.substring(0, +this.charCount).toUpperCase();\r\n            }\r\n        } else {\r\n            c = this.data.substring(0, +this.charCount).toUpperCase();\r\n        }\r\n        let textTag: HTMLElement = this.getCharacterTextTag(c, this.textColor, this.fontFamily, this.fontWeight, this.fontsize);\r\n        let colorIndex: number;\r\n        let color: string = \"\";\r\n\r\n        /**\r\n         * Populate the colors according to attributes\r\n         */\r\n        if (c.charCodeAt(0) < 65) {\r\n            color = this.getRandomColors();\r\n        } else {\r\n            colorIndex = Math.floor((c.charCodeAt(0) - 65) % this.alphabetcolors.length);\r\n            color = this.alphabetcolors[colorIndex];\r\n        }\r\n\r\n        if (this.avatarcustombgcolor) {\r\n            color = this.avatarcustombgcolor;\r\n        }\r\n\r\n        this.createSvg(this.width, this.height, color, textTag);\r\n        let lvcomponent:string = this.getLVText();\r\n        let svgHtml: string = window.btoa(unescape(encodeURIComponent(lvcomponent)));\r\n        let component: string;\r\n        let base: string = this.base;\r\n        let _style: string = \"\";\r\n        if (this.avatarBorderStyle) {\r\n            _style = this.avatarBorderStyle;\r\n        } else if(this.avatarborder === \"true\") {\r\n            _style = this.defaultBorder;\r\n        }\r\n\r\n        if (this.rotatedeg !== \"0\") {\r\n            // tslint:disable-next-line:max-line-length\r\n            _style = \"-ms-transform: rotate(\" + this.rotatedeg + \"deg); -webkit-transform: rotate(\" + this.rotatedeg + \"deg); transform: rotate(\" + this.rotatedeg + \"deg)\";\r\n        }\r\n\r\n        if (this.shape) {\r\n            if (this.shape === \"round\") {\r\n                let round_style: string = this.radius + _style;\r\n                if (this.data.indexOf(\"http\") > -1 || this.data.indexOf(\"data:image\") > -1) {\r\n                    let img_size: string = \"width:\" + this.width + \"px;height:\" + this.height + \"px;\";\r\n                    component = \"<img src=\" + this.data + \" style='\" + img_size + round_style + \"'  />\";\r\n                } else {\r\n                    component = \"<img src=\" + base + svgHtml + \" style='\" + round_style + \"' title='\" + this.data + \"' />\";\r\n                }\r\n            }\r\n        } else {\r\n            if (this.data.indexOf(\"http\") > -1 || this.data.indexOf(\"data:image\") > -1) {\r\n                let img_size: string = \"width:\" + this.width + \"px;height:\" + this.height + \"px;\";\r\n                component = \"<img src=\" + this.data + \" style='\" + img_size + _style + \"'  />\";\r\n            } else {\r\n                component = \"<img src=\" + base + svgHtml + \" style='\" + _style + \"' title='\" + this.data + \"' />\";\r\n            }\r\n        }\r\n\r\n        this.letteravatar.innerHTML = component;\r\n\r\n    }\r\n\r\n    private getLVText(): string {\r\n        let lvTag: HTMLElement = document.createElement(\"div\");\r\n        lvTag.appendChild(this.imageTag.cloneNode());\r\n        return this.imageTag.outerHTML;\r\n    }\r\n\r\n    /**\r\n     * Populate the svg tag which will used for the avatar generation\r\n     * @param width\r\n     * @param height\r\n     * @param color\r\n     * @returns\r\n     */\r\n    private createSvg(width: string, height: string, color: string, cobj: HTMLElement): string {\r\n\r\n        let svgTag: HTMLElement = document.createElement(\"svg\");\r\n        svgTag.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n        svgTag.setAttribute(\"pointer-events\", \"none\");\r\n        svgTag.setAttribute(\"width\", width);\r\n        svgTag.setAttribute(\"height\", height);\r\n        svgTag.setAttribute(\"style\", \"background-color:\" + color + \";width:\" + width + \"px\" + \";height:\" + height + \"px\");\r\n        svgTag.appendChild(cobj);\r\n        this.imageTag = svgTag;\r\n\r\n        return svgTag.innerHTML;\r\n    }\r\n\r\n    /**\r\n     *  Generate the Letter tag by using the svg text element\r\n     * @param character\r\n     * @param textColor\r\n     * @param fontFamily\r\n     * @param fontWeight\r\n     * @param fontsize\r\n     * @returns\r\n     */\r\n    // tslint:disable-next-line:max-line-length\r\n    private getCharacterTextTag(character:string, textColor: string, fontFamily: string, fontWeight: string, fontsize: string): HTMLElement {\r\n        let textTag: HTMLElement = document.createElement(\"text\");\r\n        textTag.setAttribute(\"text-anchor\", \"middle\");\r\n        textTag.setAttribute(\"x\", \"50%\");\r\n        textTag.setAttribute(\"y\", \"50%\");\r\n        textTag.setAttribute(\"dy\", \"0.35em\");\r\n        textTag.setAttribute(\"pointer-events\", \"auto\");\r\n        textTag.setAttribute(\"fill\", textColor);\r\n        textTag.setAttribute(\"font-family\", fontFamily);\r\n        textTag.setAttribute(\"style\", \"font-weight:\" + fontWeight + \";font-size:\" + fontsize + \"px\");\r\n        textTag.innerText = character;\r\n        return textTag;\r\n    }\r\n\r\n    /**\r\n     * Get the random colors\r\n     * @returns\r\n     */\r\n    private getRandomColors(): string {\r\n        let letters: string[] = \"0123456789ABCDEF\".split(\"\");\r\n        let _color: string = \"#\";\r\n        for (let i: number = 0; i < 6; i++) {\r\n            _color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return _color;\r\n    }\r\n\r\n    /**\r\n     * get the first name and last name first letters and combined and form the letter avatar\r\n     * @param data\r\n     * @returns\r\n     */\r\n    private getFirstAndLastName(data: string): string {\r\n        let names: string[] = data.split(\" \");\r\n        if (names && names.length >= 2) {\r\n            let firstName: string = names[0];\r\n            let lastName: string = names[1];\r\n            if (firstName && lastName) {\r\n                let text: string = firstName.substr(0, 1) + lastName.substr(0, 1);\r\n                return text;\r\n            } else {\r\n                return data.substr(0, 2);\r\n            }\r\n        }\r\n    }\r\n}",
    "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NguLetterAvatarComponent} from './letter-avatar/ngu-letter-avatar.component';\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [NguLetterAvatarComponent\r\n    ],\r\n    providers: [],\r\n    exports: [NguLetterAvatarComponent]\r\n})\r\nexport class NguUtilityModule { }\r\n"
  ],
  "names": [
    "LAmeta",
    "this",
    "defaultColors",
    "defaultTextColor",
    "defaultBorder",
    "defaultTriangleup",
    "deafultFontsize",
    "defaultHeight",
    "deafultWidth",
    "defaultRadius",
    "deafultDynamic",
    "defaultRotatedeg",
    "defaultAvatarborder",
    "defaultFontWeight",
    "defaultFontFamily",
    "Attributes",
    "alphabetcolors",
    "textColor",
    "triangleup",
    "fontsize",
    "height",
    "width",
    "radius",
    "avatarcustombgcolor",
    "dynamic",
    "fontWeight",
    "fontFamily",
    "shape",
    "data",
    "rotatedeg",
    "avatarborder",
    "NguLetterAvatarComponent",
    "el",
    "_meta",
    "attribute",
    "base",
    "charCount",
    "letteravatar",
    "nativeElement",
    "prototype",
    "ngAfterViewInit",
    "getPropertyValue",
    "createAvatar",
    "property",
    "getAttribute",
    "c",
    "_data",
    "getFirstAndLastName",
    "toUpperCase",
    "substring",
    "colorIndex",
    "textTag",
    "getCharacterTextTag",
    "color",
    "charCodeAt",
    "getRandomColors",
    "Math",
    "floor",
    "length",
    "createSvg",
    "component",
    "lvcomponent",
    "getLVText",
    "svgHtml",
    "window",
    "btoa",
    "unescape",
    "encodeURIComponent",
    "_style",
    "avatarBorderStyle",
    "round_style",
    "indexOf",
    "img_size",
    "innerHTML",
    "document",
    "createElement",
    "appendChild",
    "imageTag",
    "cloneNode",
    "outerHTML",
    "cobj",
    "svgTag",
    "setAttribute",
    "character",
    "innerText",
    "letters",
    "split",
    "_color",
    "i",
    "random",
    "names",
    "firstName",
    "lastName",
    "substr",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "ElementRef",
    "Input",
    "avatarcustomborder",
    "NguUtilityModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "providers",
    "exports"
  ],
  "mappings": "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"
}
